import{e as a}from"./index-CFOCruvU.js";const c=async e=>{try{return(await a(`/calendar/${e}`)).map(r=>({...r,startTime:new Date(r.startTime),endTime:new Date(r.endTime)}))}catch(t){throw console.error("Error fetching practice events:",t),t}},s=async(e,t)=>{try{const r=t.type||"practice",o=await a(`/calendar/${e}`,{method:"POST",body:JSON.stringify({title:t.title,description:t.description||"",startTime:t.startTime.toISOString(),endTime:t.endTime.toISOString(),isCompleted:t.isCompleted||!1,sheetMusicId:t.sheetMusicId,color:t.color||"#3B82F6",type:r})});return{...o,startTime:new Date(o.startTime),endTime:new Date(o.endTime)}}catch(r){throw console.error("Error adding practice event:",r),r}},n=async(e,t)=>{try{await a(`/calendar/${e}/${t.id}`,{method:"PUT",body:JSON.stringify({title:t.title,description:t.description,startTime:t.startTime.toISOString(),endTime:t.endTime.toISOString(),isCompleted:t.isCompleted,sheetMusicId:t.sheetMusicId,color:t.color,type:t.type})})}catch(r){throw console.error("Error updating practice event:",r),r}},d=async(e,t)=>{try{await a(`/calendar/${e}/${t}`,{method:"DELETE"})}catch(r){throw console.error("Error deleting practice event:",r),r}},l=async(e,t,r)=>{try{await a(`/calendar/${e}/${t}/toggle-completion`,{method:"PATCH",body:JSON.stringify({isCompleted:r})})}catch(o){throw console.error("Error toggling practice event completion:",o),o}};export{s as a,d,c as f,l as t,n as u};
